import numpy as np
import matplotlib.pyplot as plt

#data from Brazil
RestDelete = [615, 539, 725, 578, 512, 615, 614, 615, 614, 511, 616, 614, 614, 512, 512, 614, 558, 470, 445, 470, 422, 524, 523, 581, 614, 615, 615, 510, 615, 616, 613, 513, 615, 523, 603, 614, 515, 509, 656, 470, 449, 574, 616, 628, 601, 512, 614, 615, 629, 599, 513, 613, 615, 615, 614, 616, 521, 501, 615, 614, 511, 615, 512, 614, 613, 617, 613, 513, 614, 613, 616, 512, 619, 506, 616, 511, 483, 439, 614, 511, 615, 618, 509, 549, 578, 614, 422, 498, 616, 613, 512, 615, 614, 613, 616, 614, 615, 541, 569, 434]
RestUpdate = [613, 420, 516, 601, 613, 615, 615, 614, 613, 616, 614, 515, 614, 512, 613, 614, 614, 535, 596, 610, 613, 616, 633, 431, 469, 492, 533, 614, 540, 479, 520, 508, 615, 414, 508, 615, 615, 615, 433, 518, 584, 613, 514, 514, 611, 614, 511, 615, 512, 614, 615, 515, 511, 612, 615, 716, 512, 615, 615, 512, 514, 612, 613, 619, 448, 571, 512, 514, 510, 422, 601, 416, 518, 503, 511, 612, 512, 630, 599, 514, 510, 519, 664, 559, 614, 613, 432, 592, 617, 612, 616, 615, 518, 609, 613, 614, 513, 613, 617, 514]
RestAdd = [582, 541, 614, 614, 665, 462, 537, 487, 614, 615, 614, 615, 615, 648, 579, 616, 613, 614, 664, 565, 615, 511, 568, 576, 495, 613, 616, 614, 512, 614, 615, 516, 609, 619, 615, 609, 444, 580, 614, 615, 614, 545, 582, 513, 613, 512, 614, 614, 555, 587, 599, 615, 512, 614, 624, 605, 615, 613, 615, 717, 612, 622, 516, 605, 630, 599, 614, 518, 511, 517, 607, 510, 613, 615, 512, 558, 568, 512, 512, 614, 678, 556, 643, 480, 612, 617, 613, 598, 435, 605, 616, 618, 609, 514, 612, 614, 614, 511, 616, 614]
RestGet = [613, 614, 553, 572, 616, 581, 545, 614, 615, 512, 613, 614, 551, 577, 614, 614, 615, 618, 611, 517, 507, 614, 619, 610, 614, 481, 543, 634, 595, 516, 609, 523, 617, 704, 512, 512, 617, 514, 575, 547, 614, 615, 614, 613, 614, 616, 613, 734, 597, 518, 432, 434, 464, 513, 547, 574, 516, 447, 475, 510, 483, 538, 466, 558, 530, 493, 442, 481, 512, 614, 615, 649, 580, 564, 562, 442, 581, 617, 515, 610, 511, 618, 715, 612, 614, 584, 590, 568, 614, 510, 615, 615, 544, 690, 517, 605, 616, 612, 515, 510]
RestDeleteRpc = [533, 419, 605, 614, 512, 613, 512, 523, 502, 514, 510, 574, 555, 514, 610, 614, 510, 514, 614, 512, 512, 512, 615, 640, 590, 613, 511, 557, 467, 616, 614, 716, 615, 646, 583, 613, 513, 513, 511, 604, 523, 614, 615, 614, 614, 512, 613, 616, 618, 609, 512, 615, 616, 622, 605, 614, 512, 528, 498, 618, 611, 613, 561, 507, 574, 508, 616, 614, 614, 641, 587, 425, 600, 615, 614, 615, 614, 613, 616, 616, 612, 512, 620, 509, 611, 615, 613, 616, 615, 614, 613, 616, 614, 614, 615, 511, 516, 508, 512, 512]
RestUpdateRpc = [616, 615, 512, 511, 566, 565, 610, 513, 560, 566, 613, 616, 512, 614, 617, 612, 614, 614, 538, 486, 616, 615, 612, 572, 453, 717, 452, 572, 613, 513, 614, 615, 614, 613, 548, 580, 614, 615, 616, 617, 523, 598, 512, 510, 617, 617, 611, 615, 511, 615, 615, 614, 615, 613, 512, 513, 615, 614, 433, 488, 615, 632, 503, 606, 614, 614, 573, 496, 602, 584, 612, 1546, 635, 589, 609, 533, 595, 630, 574, 504, 441, 615, 614, 614, 615, 631, 498, 511, 626, 605, 808, 724, 555, 469, 614, 574, 553, 614, 614, 615]
RestAddRpc = [639, 588, 616, 614, 615, 528, 508, 605, 612, 614, 618, 508, 613, 513, 717, 514, 613, 614, 613, 729, 624, 594, 615, 618, 610, 617, 610, 615, 614, 616, 648, 579, 616, 613, 513, 621, 505, 615, 511, 620, 632, 592, 512, 615, 614, 662, 567, 614, 510, 616, 510, 614, 513, 595, 532, 512, 618, 610, 614, 614, 615, 616, 424, 598, 492, 534, 614, 510, 416, 506, 616, 613, 615, 614, 517, 510, 445, 575, 615, 414, 415, 424, 490, 613, 529, 651, 414, 419, 546, 512, 614, 513, 531, 595, 616, 418, 550, 413, 538, 415]
RestGetRpc = [614, 613, 619, 508, 614, 514, 639, 589, 614, 511, 615, 645, 482, 615, 612, 616, 617, 611, 512, 615, 512, 512, 614, 615, 529, 597, 512, 613, 510, 514, 615, 647, 599, 602, 507, 545, 432, 563, 523, 511, 600, 615, 511, 615, 615, 614, 617, 610, 616, 615, 422, 499, 486, 503, 466, 593, 560, 464, 652, 988, 729, 500, 613, 613, 513, 729, 614, 500, 616, 611, 637, 701, 557, 564, 613, 523, 605, 565, 561, 541, 455, 540, 615, 545, 584, 613, 613, 620, 506, 617, 612, 614, 615, 614, 634, 595, 612, 617, 614, 817]
RMIAdd = [614, 512, 723, 613, 616, 608, 614, 615, 614, 531, 511, 510, 498, 517, 597, 524, 714, 622, 607, 535, 591, 536, 598, 610, 612, 614, 621, 608, 613, 616, 511, 513, 614, 614, 614, 615, 536, 594, 613, 616, 816, 718, 611, 580, 438, 620, 614, 615, 512, 512, 409, 615, 614, 614, 615, 513, 511, 614, 615, 614, 614, 615, 614, 512, 717, 615, 511, 616, 407, 410, 621, 440, 480, 611, 613, 623, 739, 458, 545, 604, 618, 611, 514, 514, 510, 510, 512, 618, 405, 616, 511, 683, 546, 621, 609, 512, 613, 631, 560, 763]
RMIGet = [504, 452, 443, 696, 560, 614, 621, 607, 615, 511, 617, 612, 464, 664, 612, 615, 614, 465, 559, 614, 615, 619, 609, 615, 511, 621, 420, 598, 512, 614, 512, 615, 614, 656, 574, 513, 717, 441, 608, 587, 619, 611, 510, 514, 510, 617, 612, 513, 614, 513, 613, 514, 541, 486, 609, 512, 614, 513, 519, 506, 615, 510, 512, 616, 615, 612, 544, 418, 573, 615, 511, 616, 511, 615, 614, 614, 624, 605, 614, 530, 699, 614, 615, 614, 512, 445, 477, 613, 616, 614, 614, 512, 615, 613, 615, 521, 503, 614, 512, 524]
SoapGet = [532, 569, 614, 616, 511, 512, 517, 439, 583, 623, 432, 494, 496, 615, 614, 512, 615, 612, 514, 614, 623, 606, 518, 609, 615, 613, 512, 615, 614, 614, 615, 614, 537, 589, 613, 615, 613, 533, 542, 566, 614, 510, 636, 494, 617, 527, 595, 433, 591, 617, 572, 551, 614, 615, 615, 614, 615, 614, 521, 504, 614, 519, 503, 523, 605, 614, 512, 615, 616, 612, 615, 614, 516, 441, 578, 616, 614, 614, 424, 604, 608, 616, 614, 615, 519, 425, 489, 512, 520, 607, 614, 430, 499, 514, 605, 428, 604, 504, 613, 616]
SoapAdd = [614, 616, 560, 565, 615, 436, 599, 536, 479, 510, 618, 622, 603, 614, 447, 577, 524, 602, 616, 612, 620, 610, 756, 472, 615, 512, 614, 615, 616, 613, 614, 615, 613, 614, 512, 617, 612, 616, 614, 512, 614, 591, 536, 526, 604, 615, 610, 614, 536, 500, 602, 615, 512, 614, 615, 614, 615, 614, 513, 614, 514, 553, 571, 516, 507, 615, 614, 436, 547, 500, 463, 512, 614, 717, 519, 607, 615, 614, 614, 643, 496, 602, 614, 615, 609, 517, 511, 616, 615, 614, 614, 615, 614, 512, 615, 522, 604, 614, 553, 574]


fig, axes = plt.subplots(2, 3, figsize=(12, 6))  # Adjust figsize for better visualization

# Plot SOAP boxplot on the first subplot
axes[0, 0].boxplot([SoapGet, SoapAdd], showfliers=False)
axes[0, 0].set_title('SOAP')
axes[0, 0].set_xticklabels(['Get', 'Add'])
axes[0, 0].set_ylabel('Response Time')

# Plot RMI boxplot on the second subplot
axes[0, 1].boxplot([RMIGet, RMIAdd], showfliers=False)
axes[0, 1].set_title('RMI')
axes[0, 1].set_xticklabels(['Get', 'Add'])
axes[0, 1].set_ylabel('Response Time')

# Plot REST boxplot on the third subplot
axes[0, 2].boxplot([RestDelete, RestUpdate, RestAdd, RestGet], showfliers=False)
axes[0, 2].set_title('REST')
axes[0, 2].set_xticklabels(['DELETE', 'UPDATE', 'POST', 'GET'])
axes[0, 2].set_ylabel('Response Time')

# Move to the second row for RESTRPC and All APIs plots
axes[1, 0].boxplot([RestDeleteRpc, RestUpdateRpc, RestAddRpc, RestGetRpc], showfliers=False)
axes[1, 0].set_title('RESTRPC')
axes[1, 0].set_xticklabels(['DELETE', 'UPDATE', 'POST', 'GET'])
axes[1, 0].set_ylabel('Response Time')

# Combine data for all APIs plot
all_apis_data = [SoapGet, RMIGet, RestGet, RestGetRpc]
axes[1, 1].boxplot(all_apis_data, showfliers=False)
axes[1, 1].set_title('All APIs GET operation')
axes[1, 1].set_xticklabels(['SOAP', 'RMI', 'REST', 'RESTRPC'])
axes[1, 1].set_ylabel('Response Time')

RestGetRpcUK = [60, 62, 60, 59, 61, 62, 60, 61, 60, 62, 63, 62, 59, 64, 61, 62, 62, 67, 62, 73, 66, 60, 59, 60, 65, 67, 64, 69, 92, 80, 67, 62, 64, 70, 66, 62, 66, 67, 68, 75, 87, 68, 70, 71, 59, 81, 59, 61, 69, 69, 68, 70, 60, 58, 58, 58, 58, 61, 63, 92, 88, 58, 60, 62, 62, 71, 80, 59, 61, 63, 89, 89, 89, 74, 61, 60, 67, 60, 62, 70, 87, 61, 58, 62, 68, 74, 64, 69, 71, 62, 59, 59, 65, 71, 58, 65, 68, 70, 73, 77]
RestGetRpcCanada = [412, 323, 294, 405, 407, 310, 409, 410, 410, 409, 307, 317, 297, 410, 410, 409, 307, 325, 392, 250, 364, 308, 319, 398, 308, 306, 527, 303, 298, 307, 306, 229, 385, 410, 308, 345, 371, 411, 247, 264, 306, 321, 295, 306, 308, 424, 265, 231, 236, 388, 234, 234, 343, 409, 410, 410, 231, 281, 409, 317, 297, 411, 311, 425, 288, 231, 382, 410, 411, 306, 409, 415, 439, 260, 320, 409, 411, 306, 307, 230, 283, 426, 236, 362, 411, 331, 282, 409, 411, 313, 403, 410, 267, 244, 410, 409, 308, 307, 411, 408]
RestGetRpcBrazil = [614, 613, 619, 508, 614, 514, 639, 589, 614, 511, 615, 645, 482, 615, 612, 616, 617, 611, 512, 615, 512, 512, 614, 615, 529, 597, 512, 613, 510, 514, 615, 647, 599, 602, 507, 545, 432, 563, 523, 511, 600, 615, 511, 615, 615, 614, 617, 610, 616, 615, 422, 499, 486, 503, 466, 593, 560, 464, 652, 988, 729, 500, 613, 613, 513, 729, 614, 500, 616, 611, 637, 701, 557, 564, 613, 523, 605, 565, 561, 541, 455, 540, 615, 545, 584, 613, 613, 620, 506, 617, 612, 614, 615, 614, 634, 595, 612, 617, 614, 817]
RestGetRpcJapan = [578, 615, 512, 614, 634, 595, 614, 614, 615, 519, 615, 504, 614, 615, 614, 553, 574, 616, 492, 646, 602, 613, 615, 614, 615, 614, 614, 546, 581, 614, 545, 582, 615, 513, 614, 511, 545, 583, 612, 514, 612, 515, 543, 582, 615, 613, 614, 616, 615, 618, 617, 639, 582, 614, 615, 617, 509, 615, 614, 615, 614, 614, 615, 614, 614, 622, 607, 544, 582, 616, 617, 611, 614, 614, 615, 622, 606, 615, 614, 546, 583, 612, 619, 610, 614, 602, 628, 615, 612, 614, 615, 614, 615, 615, 614, 614, 614, 615, 615, 614]
def Average(lst): 
    return sum(lst) / len(lst) 

print(Average(RestGetRpcUK))
print(Average(RestGetRpcCanada))
print(Average(RestGetRpcBrazil))
print(Average(RestGetRpcJapan))

# Combine data for all APIs plot
all_apis_data = [RestGetRpcUK, RestGetRpcCanada, RestGetRpcBrazil, RestGetRpcJapan]
axes[1, 2].boxplot(all_apis_data, showfliers=False)
axes[1, 2].set_title('All servers compared on the RESTRPC GET operation')
axes[1, 2].set_xticklabels(['UK', 'Canada', 'Brazil', 'Japan'])
axes[1, 2].set_ylabel('Response Time')

# Adjust layout to prevent overlapping elements
plt.tight_layout()

plt.show()
